package com.vdisk.util;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.RandomAccessFile;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.cert.X509Certificate;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.apache.http.Header;
import org.apache.http.client.HttpClient;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.cookie.Cookie;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicHeader;

import com.sun.org.apache.xml.internal.security.utils.Base64;
import com.vdisk.entity.VdiskAPITest;
import com.vdisk.entity.VdiskFileOperator;

/*
 * 公共方法类
 * 
 * */
public class CommonUtils {
	//urlEncode
	public static String urlEncode(String str){
		try {
			return URLEncoder.encode(str, "utf-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	//sha1加密
	public static String fileSha1(File file){
		FileInputStream fis = null;
		try {
			MessageDigest md = MessageDigest.getInstance("SHA1");
			fis = new FileInputStream(file);
			byte buffer[] = new byte[1024];
			int length = -1;
			while((length=fis.read(buffer)) != -1){
				md.update(buffer, 0, length);
			}
			byte b[] = md.digest();
			StringBuffer sBuffer = new StringBuffer();
			for(int i=0;i<b.length;i++){
				sBuffer.append(Integer.toString((b[i] & 0xff) + 0x100,16).substring(1));
			}
			return sBuffer.toString();
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
			return null;
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			return null;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}finally{
			try {
				fis.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	/*
	 * 文件md5加密
	 * @param file 需要md5加密的文件
	 * */
	public static String fileMd5(File file){
		FileInputStream fis = null;
		try {
			MessageDigest md = MessageDigest.getInstance("MD5");
			fis = new FileInputStream(file);
			byte buffer[] = new byte[1024];
			int length = -1;
			while((length=fis.read(buffer)) != -1){
				md.update(buffer,0,length);
			}
			byte b[] = md.digest();
			StringBuffer sBuffer = new StringBuffer();
			for(int i=0;i<b.length;i++){
				sBuffer.append(Integer.toString((b[i] & 0xff) + 0x100,16).substring(1));
			}
			return sBuffer.toString();
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
			return null;
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			return null;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}finally{
			try {
				fis.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	//将byte数字转换为16进制字符串
	public static String byteToHexString(byte[] buffer){
		char hexArray[] = {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};
		char chArr[] = new char[16*2];
		int k = 0;
		for(int i=0;i<16;i++){
			byte b = buffer[i];
			chArr[k++] = hexArray[b >>> 4 & 0xf];
			chArr[k++] = hexArray[b & 0xf];
		}
		String str = new String(chArr);
		return str;
	}
	
	//base64_encode
	public static String base64_encode(String str){
		return Base64.encode(str.getBytes());
	}
	
	public static String timeStampCovertDate(long timpStamp){
		Date date = new Date(timpStamp);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss");
		return sdf.format(date);
	}
	public static String paramUrlEncode(String str){
		try {
			return URLEncoder.encode(str,"utf8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		return str;
	}
	
	//Map按照key排序
	public static List sortMapByKey(Map<String,?> map){
		List<Map.Entry<String, ?>> list =  new ArrayList<Map.Entry<String, ?>>(map.entrySet());
		Collections.sort(list,new Comparator<Map.Entry<String, ?>>(){
			public int compare(Map.Entry<String,?> o1, Map.Entry<String,?> o2){
				return (o1.getKey()).toString().compareTo((o2.getKey()).toString());
			} 
		});
		return list;
	}
	//获取https的client
    public static DefaultHttpClient wrapClient(HttpClient base) {
        try {
            SSLContext ctx = SSLContext.getInstance("TLS");
            X509TrustManager tm = new X509TrustManager() {
                public void checkClientTrusted(X509Certificate[] xcs,
                        String string) {
                }

                public void checkServerTrusted(X509Certificate[] xcs,
                        String string) {
                }

                public X509Certificate[] getAcceptedIssuers() {
                    return null;
                }
            };
            ctx.init(null, new TrustManager[] { tm }, null);
            SSLSocketFactory ssf = new SSLSocketFactory(ctx);
            ssf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
            ClientConnectionManager ccm = base.getConnectionManager();
            SchemeRegistry sr = ccm.getSchemeRegistry();
            sr.register(new Scheme("https", ssf, 443));
            return new DefaultHttpClient(ccm, base.getParams());
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }
	//签名过期时间
	public static String getExpireTime(int interval){
		Long expire = System.currentTimeMillis() / 1000 + interval;
		return Long.toString(expire);
	}
	
	//生成定长的随机字符串
	public static String getRandStr(int len){
		String s1 = "abcdefghijklmnopqrstuvwxyz";
		String s2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		if(len >=0){
			StringBuffer sb = new StringBuffer();
			char[] charr_1 = s1.toCharArray();
			char[] charr_2 = s2.toCharArray();
			Random rnd = new Random();
			for (int i = 1; i <= len; i++) {
				if(i % 3 == 0){
					sb.append(charr_2[rnd.nextInt(charr_2.length)]);
					continue;
				}
				sb.append(charr_1[rnd.nextInt(charr_1.length)]);
			}
			return sb.toString();
		}else{
			return "";
		}
	}
	
	//组装请求参数
	public static String getRequestParams(Map<String,String> params){
		if(params != null && params.size() != 0){
			Iterator<Entry<String, String>> it = params.entrySet().iterator();
			StringBuffer sb = new StringBuffer();
			while(it.hasNext()){
				Entry<String, String> myEntry = (Entry<String, String>)it.next();
				sb.append(myEntry.getKey() + "=" + myEntry.getValue() + "&");
			}
//			System.out.println(sb.substring(0, sb.length() - 1).toString());
			return "&" + sb.substring(0, sb.length() - 1).toString();			
		}else{
			return "";
		}	
	}
	//组装请求头
	public static Header[] getRequestHeaders(Map<String,String> headers){
		Header[] allHeaders = new BasicHeader[headers.size()];
		int i = 0;
		for(String key : headers.keySet()){
			allHeaders[i] = new BasicHeader(key, headers.get(key));
//			System.out.println("aaaaa" + allHeaders[i]);
			i++;
		}
		return allHeaders;
	}
	
	//组装cookie
	public static Map<String,String> getCookies(List<Cookie> cookiesList){
		Map<String,String> map = new HashMap<String,String>();
		for(int i=0;i<cookiesList.size();i++){
			map.put(cookiesList.get(i).getName(),cookiesList.get(i).getValue());
		}
		return map;
	}
	//获取body信息
	public static StringBuffer getBody(InputStream ins){
		BufferedReader br = null;
		String str = null;
		StringBuffer sBuffer = new StringBuffer();
		br = new BufferedReader(new InputStreamReader(ins));
		try {
			while((str=br.readLine()) != null){
				sBuffer.append(str);
			}
			br.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return sBuffer;
	}
	//获取文件后缀
	public static String getFileSuffix(File file){
		String path = file.getAbsolutePath();
		int index = path.lastIndexOf(".") + 1;
		return path.substring(index,path.length());
	}
	//获取文件类型
	public static String getFiletype(String fileName) {
		String Image = "v_img";
		String Video = "v_video";
		String Music = "v_audio";
		String Document = "v_doc";
		String Folder = "v_folder";
//		String APK = "APK";
		String Others = "else";
		
		String end = "";//文件后缀
		if ("".equals(fileName) || fileName == null)
			return end;
		end = fileName.substring(fileName.lastIndexOf(".") + 1, fileName.length()).toLowerCase();
		// 判断是否为图片
		if (end.endsWith("bmp") || end.endsWith("gif") || end.endsWith("jpg")
				|| end.endsWith("jpeg") || end.endsWith("png")
				|| end.endsWith("tif") || end.endsWith("ico")
				|| end.endsWith("dwg") || end.equals("webp")) {
			return Image;
		}

		// 判断是否为视频
		if (end.equals("wmv") || end.equals("avi") || end.equals("rm")
				|| end.equals("rmvb") || end.equals("3gp") || end.equals("mov")
				|| end.equals("mp4") || end.equals("m4v") || end.equals("mkv")
				|| end.equals("flv") || end.equals("swf") || end.equals("ts")
				|| end.equals("webm")) {
			return Video;
		}

		// 判断是否为音乐
		if (end.endsWith("mid") || end.equals("midi") || end.equals("mp3")
				|| end.equals("wav") || end.equals("wma") || end.equals("amr")
				|| end.equals("ogg") || end.equals("m4a")) {
			return Music;
		}

		// 判断是否为文档
		if (end.endsWith("docx") || end.endsWith("pdf") || end.endsWith("doc")
				|| end.endsWith("txt") || end.endsWith("epub")
				|| end.endsWith("ppt") || end.endsWith("pptx")
				|| end.endsWith("xls") || end.equals("xlsx")
				|| end.equals("chm") || end.equals("html") || end.equals("htm")
				|| end.equals("csv")) {
			return Document;
		}

		// 判断是否为APK程序
//		if (end.endsWith("apk")) {
//			return APK;
//		}

		// 是否为其他
		return Others;
	}
	//获取class名字
	public static String getClassName(Object obj){
		if(obj == null){
			return "";
		}
		String str = obj.getClass().getName();
		return str.substring(str.lastIndexOf(".") + 1, str.length());
	}
	//随机获取分类id,分类id最大值41
	public static String getCategoryID(){
		String cid = String.valueOf(new Random().nextInt(VdiskAPITest.Category_ID));
		return cid;
	}
	//清除下载文件
	public static void cleanFile(String download_file_path){
		File file = new File(download_file_path);
		File[] fileArr = file.listFiles();
		for (int i = 0; i < fileArr.length; i++) {
			if(fileArr[i].isFile()){
				fileArr[i].delete();
			}
		}
	}
	//按照指定大小分割文件
	public static List<File> splitFile(File file,String splitFilePath,long blockSize){
        String path = "d:/";
        List<File> splitFiles = new ArrayList<File>();
        int parts = 0;
        if(file.length() < blockSize){
        	splitFiles.add(file);
        	return splitFiles;
        }
        else
        	parts = (file.length() / blockSize == 0)
                      ? ( int)(file.length() / blockSize)
                      : ( int)(file.length() / blockSize +1);
        long begin = 0L;
        long end = 0L;
        byte[] buf = new byte[1024 * 100];
        RandomAccessFile in = null;
        try {
        	in = new RandomAccessFile(file, "r");
        } catch (FileNotFoundException e) {
                // TODO Auto-generated catch block
               e.printStackTrace();
        } catch (IOException e) {
                // TODO Auto-generated catch block
               e.printStackTrace();
        }
         long sum = 0L;
         for(int i=0;i<parts;i++){
            try {
	             in.seek(begin);
	             end += blockSize;
	             File f = new File(path + i + "_" + file.getName());
	//           FileOutputStream fos = new FileOutputStream(i + "_" + file.getName());
	             RandomAccessFile fos = new RandomAccessFile(f,"rw" );
	             int len = -1;
	             while(in.getFilePointer() < end && (len = in.read(buf)) != -1){
	                    fos.write(buf, 0,len);
	             }
	             sum += f.length();
	//           System.out.println(sum);
	             begin = in.getFilePointer();
	             splitFiles.add(f);
	//           fos.flush();
	             fos.close();
           } catch (IOException e) {
                   // TODO Auto-generated catch block
                 e.printStackTrace();
           }
        }
//        System. out.println("splitFiles:" +sum);
        return splitFiles;
    }

	//将url、body转化为字符串
	public static String getRequestURL(Map<String,String> reqsInfo){
		if(reqsInfo != null && reqsInfo.size() != 0){
			StringBuffer sb = new StringBuffer();
			Iterator<Entry<String, String>> it = reqsInfo.entrySet().iterator();
			while(it.hasNext()){
				Map.Entry<String,String> myEntry = (Map.Entry<String, String>)it.next();
//				System.out.println(myEntry.getKey());
//				System.out.println(myEntry.getValue());
				sb.append(myEntry.getKey());
				sb.append("\r\n");
				sb.append(myEntry.getValue());
			}
//			System.out.println(sb.toString());
			return sb.toString();
		}
		return "";
	}
    
	public static void main(String[] args) throws UnsupportedEncodingException {
//		File file = new File("E:/360Downloads/TestAccountInfo.java");
//		System.out.println(CommonUtils.getFiletype("按照文件类型获取分享列表.pdf"));
		File file = new File("d:/0_test.java");
		File file1 = new File("d:/1_test.java");
		System.out.println(CommonUtils.fileMd5(file));
		System.out.println(CommonUtils.fileMd5(file1));
//		List list = splitFile(file, "d:/",VdiskFileOperator.filePartSize);
//		System.out.println(list);
	}
}
